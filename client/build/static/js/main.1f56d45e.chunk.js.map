{"version":3,"sources":["actions/index.js","actions/types.js","components/LogInModal.js","components/SignUpModal.js","components/UserAvatar.js","components/Header.js","config/breakPoints.js","components/pages/Home.js","components/DifficultyLabel.js","components/TodoCompleteButtons.js","components/TrailList.js","components/Map.js","components/SubHeader.js","components/TrailWithMap.js","components/pages/SearchResults.js","components/pages/TrailDetail.js","components/pages/WishList.js","components/pages/Completed.js","components/pages/IncorrectLogin.js","components/pages/Settings.js","components/pages/Profile.js","components/pages/About.js","components/App.js","reducers/index.js","reducers/fetchUser.js","reducers/searchTrails.js","reducers/sortBy.js","reducers/fetchTrail.js","reducers/openModal.js","reducers/refreshMap.js","reducers/infoWindow.js","reducers/extendedInfo.js","reducers/screenResize.js","index.js"],"names":["searchTrails","a","num","status","localStorage","getItem","lat","lng","payload","type","axios","get","process","trailList","data","trails","length","setItem","toggleWishlist","trail","post","toggleComplete","fetchTrail","id","openModal","modal","isOpen","refreshMap","trueOrFalse","LogInModal","Modal","size","trigger","onClick","props","className","style","margin","backgroundColor","open","this","onClose","Content","Description","textAlign","width","href","method","action","autoComplete","name","placeholder","required","marginTop","cursor","React","Component","connect","state","login","SignUpModal","signup","defaultPhoto","UserAvatar","display","alignItems","alt","height","objectFit","borderRadius","src","currentUser","photo","onError","document","getElementById","onerror","marginLeft","fontSize","firstName","options","key","text","as","Link","to","Dropdown","alignSelf","icon","Header","color","renderButtons","large","Home","searchTerm","submitSearch","e","preventDefault","window","google","maps","Geocoder","geocode","address","res","geometry","location","history","push","renderWarning","screenSize","breakPoints","title","onSubmit","value","onChange","setState","target","GoogleApiWrapper","apiKey","DifficultyLabel","convertLabel","textTransform","fontWeight","padding","difficulty","label","TodoCompleteButtons","backgroundStyle","buttonSize","justifyConter","backgroundClass","user","wishList","find","el","completed","redirectTo","toggleHeart","buttonStyles","toggleCheck","marginRight","renderButtonSize","withRouter","stockImage","TrailResultsList","dimmedId","renderImage","position","top","left","imgSmallMed","bottom","ind","Rating","rating","Math","round","stars","maxRating","toString","map","summary","ascent","maxWidth","starVotes","match","params","renderItem","sortedTrails","sortBy","sort","b","reverse","showExtendedInfo","renderLargeTrails","renderSmallTrail","extendedInfo","infoWindow","MapContainer","marker","visible","mapRendered","mapStyles","bounds","LatLngBounds","extend","LatLng","latitude","longitude","refs","resultMap","fitBounds","renderMap","redoMap","onMouseover","renderIcons","ref","zoom","initialCenter","createMarkers","renderInfoWindow","SubHeader","selection","Grid","Column","val","justifyContent","headerContent","addDropdown","renderDropdown","marginBottom","renderSubHeader","TrailWithMap","contextRef","createRef","TrailList","Sticky","context","offset","renderExtendedInfoButton","Map","SearchResults","trailSearchResults","TrailDetail","iconStyles","labelStyles","paddingLeft","verticalAlign","detailStyles","detailStyles2","imgMedium","avg","max","minHeight","getDifficulty","descent","high","low","calcGrade","conditionStatus","paddingBottom","currentTrail","WishList","Completed","IncorrectLogin","Settings","units","flexDirection","lastName","defaultValue","Profile","date","dateString","Date","dateCreated","toDateString","slice","formatDate","renderTrails","About","App","addEventListener","screenResize","innerWidth","fetchUser","path","component","exact","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxPromise","ReactDOM","render","querySelector"],"mappings":"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","file":"static/js/main.1f56d45e.chunk.js","sourcesContent":["import axios from 'axios'\n\nimport { FETCH_USER, SEARCH_TRAILS, TOGGLE_WISHLIST, TOGGLE_COMPLETE, SORT_TRAILS, FETCH_TRAIL, OPEN_MODAL, REFRESH_MAP, INFO_WINDOW, EXTENDED_INFO, SCREEN_RESIZE } from './types'\n\n//stores the width of the current display in pixels for use in responsive components\nexport const screenResize = width => {\n    return({\n        type: SCREEN_RESIZE,\n        payload: width\n    })\n}\n\n//get currently logged in user\nexport const fetchUser = () => {\n    const user = axios.get('/api/current_user')\n\n    return({\n        payload: user,\n        type: FETCH_USER\n    })\n}\n\n//search for trails using search term\nexport const searchTrails = async (num=10) => {\n    \n    // // used when testing to reduce number of google map requests\n    //     const lat: 38.856,\n    //     const lng: -104.781\n\n    const status = localStorage.getItem('searchStatus')\n    const lat = localStorage.getItem('lat')\n    const lng = localStorage.getItem('lng')\n\n    if(status!==\"OK\"){\n        return({\n            payload: null,\n            type: SEARCH_TRAILS\n        })\n    }\n        \n    const trailList = await axios.get(`https://www.hikingproject.com/data/get-trails?lat=${lat}&lon=${lng}&maxResults=${num}&maxDistance=10&key=${process.env.REACT_APP_hikingProjectAPIKey}`)\n    \n    //prevents screen that says \"no results for...\" for several seconds after doing a second search, when the first search had no results\n    trailList.data.trails.length===0 ? localStorage.setItem('trailResults','false') : localStorage.setItem('trailResults','true')\n\n    return({\n        payload: trailList,\n        type: SEARCH_TRAILS\n    })\n\n    //The following was used when a separate geocoding call was made, but this was changed since it creates API key security issues. The following call will not work with http restrictions (only IP)\n    // const googleData = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${term}&key=${process.env.REACT_APP_geocodingAPIKey}`)\n\n    // //occurs when google can't find location\n    // if(googleData.data.results.length===0){\n    //     return({\n    //         payload: null,\n    //         type: SEARCH_TRAILS\n    //     })\n    // }\n\n    // const location = googleData.data.results[0].geometry.location\n\n\n    // The following was one option for protecting the geocoding api key:\n    // //determines whether or not to use heroku's fixie plugin which provides a static ip address for the geocoding api key whitelist\n    // let googleData = []\n\n    // if(process.env.NODE_ENV==='development'){\n    //     googleData = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?address=${term}&key=${process.env.REACT_APP_geocodingAPIKey}`)\n    // }else{\n\n    //     const fixieRequest = request.defaults({'proxy': process.env.FIXIE_URL})\n    //     fixieRequest(`https://maps.googleapis.com/maps/api/geocode/json?address=${term}&key=${process.env.REACT_APP_geocodingAPIKey}`, (req,res,body)=>{\n    //     })\n    //     return({\n    //         payload: null,\n    //         type: SEARCH_TRAILS\n    //     })    \n    // }\n}\n\n//toggle whether trail is in wishlist array or not\nexport const toggleWishlist = (trail) => {\n    const user = axios.post('/api/wishlist', {trail})\n\n    return({\n        payload: user,\n        type: TOGGLE_WISHLIST\n    })\n}\n\n//toggle whether trail is in completed array or not\nexport const toggleComplete = (trail) => {\n    const user = axios.post('/api/completed', {trail})\n\n    return({\n        payload: user,\n        type: TOGGLE_COMPLETE\n    })\n}\n\n//sort trails by rating, distance or name - actual sorting is done is trailList component\nexport const sortBy = (sortBy) => {\n\n    return({\n        payload: sortBy,\n        type: SORT_TRAILS\n    })\n}\n\n//fetches one trail\nexport const fetchTrail = async (id) => {\n    const trail = axios.get(`https://www.hikingproject.com/data/get-trails-by-id?ids=${id}&key=${process.env.REACT_APP_hikingProjectAPIKey}`)\n\n    return({\n        payload: trail,\n        type: FETCH_TRAIL\n    })\n}\n\n//switches open states of signup and login modals\n//modal arg is either 'signup' or 'login', isOpen arg is boolean\nexport const openModal = (modal, isOpen) => {\n    return({\n        payload: ([modal, isOpen]),\n        type: OPEN_MODAL\n    })\n}\n\n//if refreshMap is ever set to true, the map will be refreshed, this is done when resorting list\n//anytime refreshMap is set to true, it must be set back to false right after the map is updated so it doesn't keep updating which has a fee associated with it\nexport const refreshMap = (trueOrFalse) => {\n    return({\n        payload: trueOrFalse,\n        type: REFRESH_MAP\n    })\n}\n\n//indicates the infoWindow that should be active on google map due to hovering on trail list or on marker\nexport const infoWindow = (id) => {\n    return({\n        payload: id,\n        type: INFO_WINDOW\n    })\n}\n\n//indicates if extended info should be shown on trail list screen, true means enxtended info is shown\nexport const extendedInfo = (trueOrFalse) => {\n    return({\n        payload: trueOrFalse,\n        type: EXTENDED_INFO\n    })\n}\n\n","export const FETCH_USER = 'FETCH_USER'\nexport const SEARCH_TRAILS = 'SEARCH_TRAILS'\nexport const TOGGLE_WISHLIST = 'TOGGLE_WISHLIST'\nexport const TOGGLE_COMPLETE = 'TOGGLE_COMPLETE'\nexport const SORT_TRAILS = 'SORT_TRAILS'\nexport const FETCH_TRAIL = 'FETCH_TRAIL'\nexport const OPEN_MODAL = 'OPEN_MODAL'\nexport const REFRESH_MAP = 'REFRESH_MAP'\nexport const INFO_WINDOW = 'INFO_WINDOW'\nexport const EXTENDED_INFO = 'EXTENDED_INFO'\nexport const SCREEN_RESIZE = 'SCREEN_RESIZE'\n\n\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Modal } from 'semantic-ui-react'\n\nimport { openModal } from '../actions'\n\nclass LogInModal extends React.Component {\n\n    render(){\n        return(\n            <Modal \n                size='mini' \n                trigger={<button onClick={()=>this.props.openModal('login',true)} className='ui primary button enlarge-on-hover' style={{margin:'auto 5px auto auto', backgroundColor:'#1A8D1A'}}>Log In</button>}\n                open={this.props.isOpen}\n                onClose={()=>this.props.openModal('login',false)}\n                >\n                <Modal.Content>\n                    <Modal.Description>\n                        <div style={{textAlign:'center', width:'80%', margin:'0 auto'}}>                                    \n                            <h1>Log In</h1>\n                            <p>Welcome back. Log in below.</p>\n                            <a className=\"ui primary button google\" href='/auth/google' style={{margin:'10px 5px auto auto', width:'100%', backgroundColor:'#D3472C'}}><i className=\"google icon\"/>Log in with Google</a>\n                            {/* <a className=\"ui primary button facebook\" href='/auth/facebook' style={{margin:'10px 5px auto auto', width:'100%', backgroundColor:'#3D64A5'}}><i className=\"facebook icon\"/>Log in with Facebook</a> */}\n                            <a className=\"ui primary button twitter\" href='/auth/twitter' style={{margin:'10px 5px auto auto', width:'100%', backgroundColor:'##1DA1F2'}}><i className=\"twitter icon\"/>Log in with Twitter</a>\n                            <div className='ui horizontal divider'>OR</div>\n                            <form className='ui form' method='post' action='/auth/login' autoComplete='off'>\n                                <div className='field'>\n                                    <input name='username' type='text' placeholder='Username' required/>\n                                </div>\n                                <div className='field'>\n                                    <input name='password' type='password' placeholder='Password' required/>\n                                </div>\n                                <button className='ui primary submit button' type='submit' style={{width:'100%'}}>Log In</button>\n                            </form>\n                            <div style={{marginTop:'20px'}}><button className='button-link' style={{cursor:'pointer'}} onClick={()=>this.props.openModal('signup',true)}>Need to create an account?</button></div>\n                        </div>\n                    </Modal.Description>\n                </Modal.Content>\n            </Modal>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return({\n        isOpen: state.openModal.login\n    })\n}\n\nexport default connect(mapStateToProps,{openModal})(LogInModal)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Modal } from 'semantic-ui-react'\n\nimport { openModal } from '../actions'\n\nclass SignUpModal extends React.Component {\n    render(){\n        return(\n            <Modal \n                size='mini' \n                trigger={<button onClick={()=>this.props.openModal('signup',true)} className='ui primary button enlarge-on-hover' style={{margin:'auto 5px auto auto', backgroundColor:'#1A8D1A'}}>Sign Up</button>}\n                open={this.props.isOpen}\n                onClose={()=>this.props.openModal('signup',false)}\n                >\n                <Modal.Content>\n                    <Modal.Description>\n                        <div style={{textAlign:'center', width:'80%', margin:'0 auto'}}>                                    \n                            <h1>Sign Up</h1>\n                            <p>Welcome. Sign up below.</p>\n                            <a className=\"ui primary button google\" href='/auth/google' style={{margin:'10px 5px auto auto', width:'100%', backgroundColor:'#D3472C'}}><i className=\"google icon\"/>Sign up with Google</a>\n                            {/* <a className=\"ui primary button facebook\" href='/auth/facebook' style={{margin:'10px 5px auto auto', width:'100%', backgroundColor:'#3D64A5'}}><i className=\"facebook icon\"/>Sign up with Facebook</a> */}\n                            <a className=\"ui primary button twitter\" href='/auth/twitter' style={{margin:'10px 5px auto auto', width:'100%', backgroundColor:'##1DA1F2'}}><i className=\"twitter icon\"/>Sign up with Twitter</a>\n                            <div className='ui horizontal divider'>OR</div>\n                            <form className='ui form' method='post' action='/auth/signup' autoComplete='off'>\n                                <div className='field'>\n                                    <input name='username' type='text' placeholder='Username'/>\n                                </div>\n                                <div className='field'>\n                                    <input name='password' type='password' placeholder='Password'/>\n                                </div>\n                                <div className='field'>\n                                    <input name='firstName' type='text' placeholder='First Name'/>\n                                </div>\n                                {/* <div className='field'>\n                                    <input name='lastName' type='text' placeholder='Last Name'/>\n                                </div> */}\n                                <button className='ui primary submit button' type='submit' style={{width:'100%'}}>Sign Up</button>\n                            </form>\n                            <div style={{marginTop:'20px'}}><button className='button-link' onClick={()=>this.props.openModal('login',true)}>Already have an account?</button></div>\n                        </div>\n                    </Modal.Description>\n                </Modal.Content>\n            </Modal>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return({\n        isOpen: state.openModal.signup\n    })\n}\n\nexport default connect(mapStateToProps,{openModal})(SignUpModal)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Dropdown } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\n\nconst defaultPhoto = 'https://i.imgur.com/V5uVYsb.png'\n// const defaultPhoto = require('../../assets/missing-avatar.png')\n\nclass UserAvatar extends React.Component{\n    \n    trigger = (\n        <div style={{display:'flex', alignItems:'center'}}>\n            <img alt='Profile' id='profilePictureAvatar' style={{height:'2.5rem', width:'2.5rem', objectFit:'cover', borderRadius:'100px'}} src={this.props.currentUser.photo} onError={()=>{document.getElementById('profilePictureAvatar').src=defaultPhoto;document.getElementById('profilePictureAvatar').onerror=null}}/>\n            <span style={{marginLeft:'.8rem', fontSize:'1.15rem'}}>{this.props.currentUser ? this.props.currentUser.firstName : null}</span>\n        </div>\n    )\n\n    // <a className=\"ui primary button google\" href='/api/logout' style={{margin:'auto 5px auto auto'}}><i className=\"google icon\"/>Sign Out {this.props.currentUser.firstName}</a>\n\n    options = [\n        { key: 'user', text: 'Your Profile',  as: Link, to:'/profile'},\n        { key: 'settings', text: 'Account Settings', as: Link, to:'/settings'},\n        { key: 'sign-out', text: 'Sign Out', as:'a', href:'/api/logout'},\n    ]\n\n    render(){\n        return(\n            <Dropdown className='enlarge-on-hover' style={{alignSelf:'center', margin:'0 1.5rem'}}\n                trigger={this.trigger}\n                options={this.options}\n                icon={null}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        currentUser: state.currentUser\n    })\n}\n\nexport default connect(mapStateToProps, null)(UserAvatar)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport LogInModal from './LogInModal'\nimport SignUpModal from './SignUpModal'\nimport UserAvatar from './UserAvatar'\n\nconst logo = 'https://i.imgur.com/efdCKOK.jpg'\n// const logo = require('../assets/Logo.jpg')\n\n\nclass Header extends React.Component {\n\n    renderButtons(){\n        if(!this.props.currentUser){\n            return(\n                <>\n                    <LogInModal/>\n                    <SignUpModal/>\n                </>\n            )\n        }else{\n            return(\n                <>\n                    <Link className='ui item button-hover' to='/' style={{fontSize:'1.15rem', backgroundColor:'none'}}><i className='plus icon' style={{color:'black'}}></i>New Search</Link>\n                    <Link className='ui item button-hover' to='/favorites' style={{fontSize:'1.15rem', backgroundColor:'none'}}><i className='heart icon' style={{color:'red'}}></i>Favorites</Link>\n                    <Link className='ui item button-hover' to='/completed' style={{fontSize:'1.15rem', backgroundColor:'none'}}><i className='check circle icon' style={{color:'green'}}></i>Completed</Link>\n                    <UserAvatar/>\n                </>\n            )\n        }\n    }\n\n    render(){\n        return(\n            <div className='ui secondary menu'>\n                <Link className=\"item button-hover\" to='/' style={{backgroundColor:'none'}}>\n                    <img src={logo} alt='logo'/>\n                    <h3 style={{margin:'auto 10px'}}>Trail Finder</h3>\n                </Link>\n                <Link className='button-hover' style={{alignSelf:'center', color:'black'}} to='/about'>About</Link>\n                <div className='right menu'>\n                    {this.renderButtons()}\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return({\n        currentUser: state.currentUser\n    })\n}\n\nexport default connect(mapStateToProps)(Header)","//defines breakpoints for responsive design\r\n\r\nexport default {\r\n    large: 1200\r\n}\r\n\r\n","import React from 'react'\nimport { connect } from 'react-redux'\nimport { GoogleApiWrapper } from 'google-maps-react'\n\nimport { refreshMap } from '../../actions'\n\nimport '../../styles/styles.css'\n\nimport breakPoints from '../../config/breakPoints'\n\nclass Home extends React.Component {\n    state = {searchTerm : ''}\n\n    componentDidMount(){\n        document.title = \"Trail Finder\"\n        //this redirects the user to the page they were on if they logged in or signed up from there\n        if(localStorage.getItem('redirectTo')){\n            this.props.history.push(localStorage.getItem('redirectTo'))\n            //now clear localStorage item so it won't redirect next time home page is visited\n            localStorage.setItem('redirectTo','')\n        }\n    }\n\n    submitSearch = (e) => {\n        e.preventDefault()\n\n        //this makes sure the map is rerendered on subsequent searches, otherwise it will be centered on the last search\n        this.props.refreshMap(true)\n\n        //geocoding (getting lat and long based on search term) is done here\n        const geocoder = new window.google.maps.Geocoder()\n        geocoder.geocode({address: this.state.searchTerm}, (res, status)=>{\n            //store the search data on local storage so it isn't cleared when back arrow/refresh is pressed\n            localStorage.setItem('searchTerm', this.state.searchTerm)\n            localStorage.setItem('searchStatus', status)\n            if(status==='OK'){ //prevents error if google cannot find a location associated with search term\n                localStorage.setItem('lat', res[0].geometry.location.lat())\n                localStorage.setItem('lng', res[0].geometry.location.lng())\n                //prevents screen that says \"no results for...\" for several seconds after doing a second search, when the first search had no results\n                localStorage.setItem('geocodingResults','true')\n            }else{\n                localStorage.setItem('geocodingResults','false')\n            }\n            this.props.history.push('/trails')\n        })\n\n    }\n\n    renderWarning = () => {\n        if(this.props.screenSize < breakPoints.large){\n            return(\n                <div className='warning'>This website is not yet customized for mobile devices. Please view on a computer for best results.</div>\n            )\n        }\n    }\n\n    render(){\n        return(\n            <div>\n                <div>\n                    {this.renderWarning()}\n                </div>\n                <div className='main-image'>\n                    <form className=\"search-box\" onSubmit={e=>this.submitSearch(e)}>\n                        <div className=\"ui massive icon input\">\n                            <input type=\"text\" placeholder=\"Enter Search Location...\" value={this.state.searchTerm} onChange={e=>this.setState({searchTerm:e.target.value})}/>\n                                <i className=\"search icon\"></i>\n                                {/* the following div is just an overlay to make the search icon clickable */}\n                                <div className='search-button' onClick={e=>this.submitSearch(e)}></div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return({\n        screenSize: state.screenSize\n    })\n}\n\nconst googleMapsKey = process.env.NODE_ENV==='production' ? process.env.REACT_APP_googleMapsAPIKey : process.env.REACT_APP_googleMapsAPIKey_dev\n\nexport default connect(mapStateToProps,{ refreshMap })(GoogleApiWrapper({apiKey:googleMapsKey})(Home))","import React from 'react'\n\nclass DifficultyLabel extends React.Component {\n\n    convertLabel(){\n        switch(this.props.difficulty) {\n            case ('green'):\n                return({label:'Easy',color:'green'})\n            case ('greenBlue'):\n                return({label:'Easy',color:'green'})\n            case ('blue'):\n                return({label:'Intermediate',color:'blue'})\n            case ('blueBlack'):\n                return({label:'Intermediate',color:'blue'})\n            case ('black'):\n                return({label:'Difficult',color:'black'})\n            default:\n                return({label:'Loading',color:'white'})\n        }\n    }\n\n    style={\n        width:'100%',\n        backgroundColor:this.convertLabel().color,\n        color:'white',\n        textTransform:'uppercase',\n        textAlign:'center',\n        fontWeight:'bold',\n        padding:'5px',\n        borderRadius:'5px'\n    }\n\n    render(){\n        return(\n            <div style={this.style}>\n                {this.convertLabel().label}\n            </div>\n        )\n    }\n}\n\nexport default DifficultyLabel","import React from 'react'\nimport { connect } from 'react-redux'\nimport { withRouter } from 'react-router-dom'\n\nimport { toggleWishlist, toggleComplete, openModal } from '../actions'\n\nclass TodoCompleteButtons extends React.Component {\n\n    //removes gray background when buttons are used in trail detail and extended trail views\n    backgroundStyle = this.props.buttonSize === 'small' ? {cursor:'pointer', display:'flex'} : {display:'flex', justifyConter: 'center', alignItems: 'center'}\n    backgroundClass = this.props.buttonSize === 'small' ? '' : 'ui bottom attached button'\n\n\n    //colors buttons based on type (red or green) and whether they are selected\n    buttonStyles(type,trail){\n        //if no user, just return gray icons\n        if(!this.props.user){\n            if(type==='wishList'){\n                    return({marginLeft:'3.5px'})\n            }else{ \n                    return({marginLeft:'3.5px'})\n                }\n            }\n        //else, if there is a user check to see if each icon should be colored\n        if(type==='wishList'){\n            // if(this.props.user.wishList.length===0) return\n            if(this.props.user.wishList.find(el=>el.id===trail.id)){\n                return({color:'red', marginLeft:'3.5px'})\n            }else{\n                return({marginLeft:'3.5px'})\n            }\n        }else{\n            if(this.props.user.completed.find(el=>el.id===trail.id)){\n                return({color:'green', marginLeft:'3.5px'})\n            }else{\n                return({marginLeft:'3.5px'})\n            }\n        }\n    }\n\n    //this changes the color of the icon immediately, otherwise there is a delay between the click and when component is re-rendered\n    toggleHeart(trail){\n        if(!this.props.user){\n            this.props.openModal('login',true)\n            localStorage.setItem('redirectTo',this.props.redirectTo)\n            return undefined\n        }\n        document.getElementById(`${trail.id}-heart`).style.color === 'red' ? document.getElementById(`${trail.id}-heart`).style.color = '#2C2C2C' : document.getElementById(`${trail.id}-heart`).style.color = 'red'\n        this.props.toggleWishlist(trail)\n    }\n\n    //this changes the color of the icon immediately, otherwise there is a delay between the click and when component is re-rendered\n    toggleCheck(trail){\n        if(!this.props.user){\n            this.props.openModal('login',true)\n            localStorage.setItem('redirectTo',this.props.redirectTo)\n            return undefined\n        }\n        document.getElementById(`${trail.id}-check`).style.color === 'green' ? document.getElementById(`${trail.id}-check`).style.color = '#2C2C2C' : document.getElementById(`${trail.id}-check`).style.color = 'green'\n        this.props.toggleComplete(trail)\n    }\n\n    //creates either 'big buttons' which are used in card, or 'little buttons' which are used in trail detail and expanded views (when this.props.buttonSize = 'small')\n    renderButtonSize(){\n        const trail=this.props.trail\n\n        if(this.props.buttonSize==='small'){\n            return(\n                <div className={this.backgroundClass} style={this.backgroundStyle}>\n                    <div style = {{width:'49%', padding:'11px 0 11px 21px'}} onClick = {()=>this.toggleHeart(trail)}>\n                        Favorites\n                        <i id={`${trail.id}-heart`} className='heart icon' style={this.buttonStyles('wishList',trail)}></i>\n                    </div>\n                    <div style = {{width:'49%', padding:'11px 21px 11px 0'}} onClick = {()=>this.toggleCheck(trail)}>\n                        Completed\n                        <i id={`${trail.id}-check`} className='check circle icon' style={this.buttonStyles('completed',trail)}></i>\n                    </div>\n                </div>\n            )\n        }else{\n            //for larger buttons on card\n            return(\n                <div className={this.backgroundClass} style={this.backgroundStyle}>\n                    <div onClick = {()=>this.toggleHeart(trail)}>\n                        <i id={`${trail.id}-heart`} className='heart icon' style={{...this.buttonStyles('wishList',trail), fontSize: '1.8rem', marginTop:'.8rem'}}></i>\n                        {/* Add to Favorites */}\n                    </div>\n                    <div style={{marginLeft:'-.8rem'}} onClick = {()=>this.toggleHeart(trail)}>\n                        Add to Favorites\n                    </div>\n                    <div style={{marginRight:'-.8rem'}}  onClick = {()=>this.toggleCheck(trail)}>\n                        Add to Completed\n                    </div>\n                    <div onClick = {()=>this.toggleCheck(trail)}>\n                        {/* Add to Completed */}\n                        <i id={`${trail.id}-check`} className='check circle icon' style={{...this.buttonStyles('completed',trail), fontSize: '1.8rem', marginTop:'.8rem'}}></i>\n                    </div>\n                </div>\n            )\n        }\n\n    }\n\n    render(){\n        return(this.renderButtonSize())\n    }\n\n    // //creates favorite/complete buttons or login button if user is not logged in\n    // render(){\n    //     // if logged in\n    //     if(this.props.user){\n    //         return(this.renderButtonSize())\n    //     // if not logged in then open login modal\n    //     }else{\n    //         return(\n    //             //localstorage item 'redirectTo' will store the page to redirect to after logging in or signing up, if not on home page\n    //             <div onClick={()=>{this.props.openModal('login',true); localStorage.setItem('redirectTo',this.props.redirectTo)}}>\n    //                 <div className={this.backgroundClass} style={this.backgroundStyle}>\n    //                     <div style = {{width:'100%', padding:'5px 0'}}>\n    //                         <i className='plus icon'></i>\n    //                         Log in to add to list\n    //                     </div>\n    //                 </div>\n    //             </div>\n    //         )\n    //     }\n    // }\n}\n\nexport default connect(null,{toggleComplete,toggleWishlist,openModal})(withRouter(TodoCompleteButtons))","//Produces list of trail thumbnails, trails to display are passed in as prop 'trails'\n//This component includes the code required to make card images go dim when hovered, but it is commented out\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\n// import { Rating, Dimmer, Image } from 'semantic-ui-react'\nimport { Rating } from 'semantic-ui-react'\nimport { withRouter } from 'react-router-dom'\n\nimport { toggleWishlist, toggleComplete, infoWindow } from '../actions'\n\nimport DifficultyLabel from './DifficultyLabel'\nimport TodoCompleteButtons from './TodoCompleteButtons'\n\nconst stockImage = 'https://i.imgur.com/TbzMxRA.jpg'\n// import stockImage from '../assets/naturePhoto2.jpg'\n\nclass TrailResultsList extends React.Component {\n    //state stores id of trail with dimming effect (when hovering). null means none are dimmed\n    state={\n        dimmedId: null\n    }\n\n    //if there is no image available, a stock image and text is used\n    renderImage = (trail) => {\n        const choosePhoto = () => {\n            if(trail.imgSmallMed){\n                return(\n                    <img src={trail.imgSmallMed} style={{height:'210px', objectFit:'cover'}} alt={trail.name}/>\n                )\n            }else{\n                return(\n                    <>\n                        <img src={stockImage} style={{height:'210px', objectFit:'cover'}} alt={trail.name}/>\n                        <div style={{position:'absolute',bottom:'10px',left:'10px', color:'white', fontWeight:'bold'}}>No Photo Available (Stock Photo)</div>\n                    </>\n                )\n            }\n        }\n        return(\n            <div className='image pointer-on-hover' style={{width:'290px'}} onClick={()=>{this.props.history.push(`/trails/${trail.id}`)}}>\n                <div style={{position:'absolute',width:'45%',top:'2%',left:'2%'}}><DifficultyLabel difficulty={trail.difficulty} /></div>\n                {choosePhoto(trail)}\n            </div>\n        )\n    }\n\n    //creates a small individual trail card\n    renderSmallTrail(e,ind){\n        //the number to beginning numbering trails for pagination\n        // const pageNumStart=(this.props.pageNumber-1)*this.props.trailsPerPage+1\n\n\n\n        // const renderDimmableImage = (trail) => {\n        //     return(\n        //         <Dimmer.Dimmable as={Image} blurring dimmed={this.state.dimmedId===e.id} onMouseEnter={()=>this.setState({dimmedId:e.id})} onMouseLeave={()=>{this.setState({dimmedId:null})}}>\n        //             <Image fluid>\n        //                 {this.renderImage(e)}\n        //             </Image>\n        //             <Dimmer active={this.state.dimmedId===e.id} inverted>\n        //                 <Link to={`/trails/${e.id}`}>\n        //                     <div className='ui primary button'>\n        //                         More Info\n        //                     </div>\n        //                 </Link>\n        //             </Dimmer>\n        //         </Dimmer.Dimmable>\n        //     )\n        // }\n\n        return(\n            // <div key={e.id} className='ui card' onMouseEnter={()=>this.props.infoWindow(e.id)} onMouseLeave={()=>this.props.infoWindow(null)}> //this line can be used instead of the following one in order to change state when card is hovered over\n            <div key={e.id} className='ui raised card enlarge-on-hover'>\n                {/* Can either render a dimmable or non-dimmable image: */}\n                {/* {renderDimmableImage(e)} */}\n                {this.renderImage(e)}\n                <div className='center aligned content'>\n                    <Link to={`/trails/${e.id}`} style={{color:'black'}} className='header'>{`${ind+1}. ${e.name}`}</Link>\n                    <Link to={`/trails/${e.id}`} style={{color:'black', marginTop:'.5em', display:'block'}}  className='description'>\n                        <Rating icon='star' rating={Math.round(e.stars)} maxRating={5}/> - {e.length.toString().length===1 ? `${e.length}.0` : e.length} Miles\n                    </Link>\n                </div>\n                <TodoCompleteButtons trail={e} user={this.props.user} redirectTo='/trails'/>\n            </div>\n        )\n    }\n\n    renderLargeTrails(trails){\n        const renderItem = (trail,ind) =>{\n            return(\n                <div className='item' key={trail.id}>\n                    {this.renderImage(trail)}\n                    <div className='content'>\n                        <Link to={`/trails/${trail.id}`} style={{color:'black'}} className='header'>{trail.name}</Link>\n                        <div className='meta'>\n                            {trail.location}\n                        </div>\n                        <div className='description'>\n                            <p style={{fontWeight:'bold'}}>\"{trail.summary==='Needs Summary' ? 'A fun hike.' : trail.summary}\"</p>\n                            <p><span style={{fontWeight:'bold'}}>{trail.length.toString().length===1 ? `${trail.length}.0` : trail.length}</span> miles</p>\n                            <p><span style={{fontWeight:'bold'}}>{trail.ascent}</span> ft elevation gain</p>\n                            <div style={{maxWidth:'45%'}}>\n                                <Rating icon='star' rating={Math.round(trail.stars)} maxRating={5}/> - {trail.stars} ({trail.starVotes} ratings)\n                            </div>\n                            <div style={{maxWidth:'300px', marginLeft:'-15px'}}>\n                                <TodoCompleteButtons trail={trail} user={this.props.user} redirectTo={'/trails/'+this.props.match.params.id} buttonSize='small'/>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )\n        }\n\n        return(\n            <div className='ui divided items'>\n                {trails.map((trail,ind)=>renderItem(trail,ind))}\n            </div>\n        )\n    }\n\n    render(){\n        if(!this.props.trails){\n            return(<div>Loading...</div>)\n        }\n\n        let sortedTrails = this.props.sortBy ? this.props.trails.sort((a,b)=>(a[this.props.sortBy] > b[this.props.sortBy]) ? 1 : -1) : this.props.trails\n        if(this.props.sortBy === 'stars' || this.props.sortBy === 'difficulty') sortedTrails = sortedTrails.reverse()\n\n        return(\n            <div>\n                {this.props.showExtendedInfo ? this.renderLargeTrails(sortedTrails) : sortedTrails.map((e,ind)=>this.renderSmallTrail(e,ind))}\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return({\n        user : state.currentUser,\n        sortBy: state.sortBy,\n        showExtendedInfo: state.extendedInfo\n    })\n}\n\nexport default connect(mapStateToProps, {toggleWishlist, toggleComplete, infoWindow})(withRouter(TrailResultsList))","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Map, Marker, InfoWindow, GoogleApiWrapper } from 'google-maps-react'\nimport { withRouter } from 'react-router-dom'\n\nimport { refreshMap } from '../actions'\n\n// const redIcon = require('../assets/map-pin-red.png')\n// const greenIcon = require('../assets/map-pin-green.png')\n// const blueIcon = require('../assets/map-pin-blue.png')\n// const redGreenIcon = require('../assets/map-pin-red-green.png')\n\nclass MapContainer extends React.Component {\n    state={ name: '', marker: {}, visible: false}\n\n    mapRendered=false //used in componentDidMount and componentDidUpdate\n\n    renderMap(){\n        if(this.props.trails.length>0) this.mapRendered=true //in some cases, trail data won't be available when component mounts, and if it doesn't then the code from componentDidMount will run in componenentDidUpdate\n        if(this.props.trails.length===1) return //if there is only one marker, don't adjust size of the map\n\n        //this sizes the map to fit all the markers\n        const bounds = new window.google.maps.LatLngBounds()\n        this.props.trails.map((trail)=>{\n            bounds.extend(new window.google.maps.LatLng(\n                trail.latitude,\n                trail.longitude\n            ))\n            return null\n        })\n\n        this.refs.resultMap.map.fitBounds(bounds)\n    }\n\n    componentDidMount(){\n        this.renderMap()\n    }\n\n    componentDidUpdate(){\n        // if(this.mapRendered===true) return \n        \n        //don't need to run the following code if it was run in componentDidMount\n        if(this.mapRendered===false || this.props.redoMap===true){\n            this.mapRendered=true;\n            this.props.refreshMap(false) //this makes sure the map isn't refreshed again a second time\n            this.renderMap()\n        }\n\n    }\n\n    // including this component did update function will re-render the map each time a favorite/completed is updated, which will give a more accurate map but will also result in many more requests to the google map api which costs money\n    // componentDidUpdate(){\n    //     const bounds = new window.google.maps.LatLngBounds()\n    //     this.props.trails.map((trail)=>{\n    //         bounds.extend(new window.google.maps.LatLng(\n    //             trail.latitude,\n    //             trail.longitude\n    //         ))\n    //     })\n\n    //     this.refs.resultMap.map.fitBounds(bounds)\n    // }\n\n\n\n    mapStyles = {\n        width:'100%',\n        height: '70vh'\n        // height: this.props.showExtendedInfo ? '50vh' : '70vh'\n    }\n\n    createMarkers(){\n\n\n        return this.props.trails.map((e,ind)=>{\n            // let icon = blueIcon\n\n            //find out if trail is in favorites or completed\n            // if(this.props.user){\n            //     if(this.props.user.wishList.find(el=>el.id===e.id)) icon=redIcon\n            //     if(this.props.user.completed.find(el=>el.id===e.id)) icon=greenIcon\n            //     if(this.props.user.wishList.find(el=>el.id===e.id) && this.props.user.completed.find(el=>el.id===e.id)) icon=redGreenIcon\n            // }\n\n            return <Marker \n                key={e.id} \n                id={e.id} \n                position={{lat: e.latitude, lng:e.longitude}}\n                label={this.props.trails.length===1 ? '' : (ind+1).toString()} //doesn't add a label when there is only one trail\n                // label={(ind+(this.props.pageNumber-1)*this.props.trailsPerPage+1).toString()} // this is used when using pagination\n                onClick={(props)=>{this.props.history.push(`/trails/${props.id}`)}}\n                onMouseover={(props, marker)=>{if(this.state.name!==e.name){this.setState({name: e.name, marker: marker, visible: true})}}}\n                // icon={{\n                //     url: icon,\n                //     // anchor: new window.google.maps.Point(32,32),\n                //     scaledSize: new window.google.maps.Size(32,32)\n                // }}\n            >\n            </Marker>\n        })\n    }\n\n    renderInfoWindow(){\n        if(this.props.trails.length===1) return\n\n        const renderIcons = () => {\n            if(this.props.user){\n                if(this.props.user.wishList.find(el=>el.name===this.state.name)&&this.props.user.completed.find(el=>el.name===this.state.name)){\n                    return(\n                        <>\n                            <i className='ui heart icon' style={{color:'red'}}></i>\n                            <i className='ui check circle icon' style={{color:'green'}}></i>\n                        </>\n                    )\n                }if(this.props.user.completed.find(el=>el.name===this.state.name)){\n                    return(\n                        <i className='ui check circle icon' style={{color:'green'}}></i>\n                    )\n                }if(this.props.user.wishList.find(el=>el.name===this.state.name)){\n                    return(\n                        <i className='ui heart icon' style={{color:'red'}}></i>\n                    )\n                }\n            }\n        }\n\n        return(\n            <InfoWindow marker={this.state.marker} visible={this.state.visible}>\n                <div>\n                    <h5>{this.state.marker.label}. {this.state.name} {renderIcons()}</h5>\n                    {/* <p style={{fontWeight:'bold'}}>{this.state.name}</p> */}\n                </div>\n            </InfoWindow>\n        )\n    }\n\n    render(){\n        return(\n            <Map \n                google={this.props.google}\n                ref='resultMap'\n                zoom={11} //only applies when there is one trail and componentDidMount is bypassed\n                style={this.mapStyles}\n                visible={!this.props.showExtendedInfo}\n                initialCenter={this.props.trails[0] ? {lat: this.props.trails[0].latitude, lng: this.props.trails[0].longitude} : {lat: 0, lng: 0}} //only applies when there is one trail and componentDidMount is bypassed\n                onClick={()=>{this.setState({name: '', visible: false})}}\n                // onReady={()=>{console.log('MAP READY')}}\n            >\n            {this.createMarkers()}\n            {this.renderInfoWindow()}\n            </Map>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return({\n        user: state.currentUser,\n        redoMap: state.refreshMap,\n        showExtendedInfo: state.extendedInfo\n    })\n}\n\nconst googleMapsKey = process.env.NODE_ENV==='production' ? process.env.REACT_APP_googleMapsAPIKey : process.env.REACT_APP_googleMapsAPIKey_dev\n\nexport default connect(mapStateToProps,{refreshMap})(GoogleApiWrapper({apiKey:googleMapsKey})(withRouter(MapContainer)))\n","//Produces list of trail thumbnails, trails to display are passed in as prop 'trails'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { Dropdown, Grid } from 'semantic-ui-react'\n\nimport { sortBy, searchTrails, refreshMap } from '../actions'\n\nclass SubHeader extends React.Component {\n\n    //for search results page, we will also add a dropdown for number of search results\n    renderDropdown(){\n        const options = [\n            {key: '10', value: 10, text: '10'},\n            {key: '20', value: 20, text: '20'},\n            {key: '30', value: 30, text: '30'},\n            {key: '40', value: 40, text: '40'},\n            {key: '50', value: 50, text: '50'}\n        ]\n\n        return(\n            <Dropdown placeholder='Number of Results' selection options={options} onChange={(e, data)=>this.props.searchTrails(data.value)}/>\n        )\n    }\n\n    //subheader contains sortby dropdown and text heading\n    renderSubHeader(){\n        const options = [\n            {key: 'length', value: 'length', text: 'Distance'},\n            {key: 'stars', value: 'stars', text: 'Rating'},\n            {key: 'difficulty', value: 'difficulty', text: 'Difficulty'},\n            {key: 'name', value: 'name', text: 'Name'}\n        ]\n\n        const onDropdownChange = (val) => {\n            this.props.sortBy(val)\n            this.props.refreshMap(true)\n        }\n\n        return(\n            <>\n            <div className='ui divider' style={{marginTop:'-1rem'}}></div>\n            <Grid>\n                <Grid.Column width={6}>\n                    <Dropdown placeholder='Sort by' selection options={options} onChange={(e, data)=>onDropdownChange(data.value)}/>\n                </Grid.Column>\n                <Grid.Column width={10}>\n                    <div style={{display:'flex', justifyContent:'space-between', alignItems:'flex-start'}}>\n                        <h2 style={{textAlign:'center', textTransform:'capitalize'}}>{this.props.headerContent}</h2>\n                        {this.props.addDropdown ? this.renderDropdown() : <></>}\n                    </div>\n                </Grid.Column> \n            </Grid>\n            </>\n\n\n            // <div className='ui secondary menu' style={{alignItems:'center'}}>\n            //     <div style={{position:'absolute'}}>\n            //         <Dropdown placeholder='Sort by' selection options={options} onChange={(e, data)=>this.props.sortBy(data.value)}/>\n            //     </div>\n            //     <h2 style={{margin:'12px auto 20px auto'}}>{this.props.headerContent}</h2>\n            // </div>\n        )\n    }\n\n    render(){\n        return(\n            <div style={{marginBottom:'15px'}}>\n                {this.renderSubHeader()}\n            </div>\n        )\n    }\n}\n\n\nconst mapStateToProps = (state) => {\n    return({\n        user : state.currentUser\n    })\n}\n\nexport default connect(mapStateToProps,{sortBy, searchTrails, refreshMap})(SubHeader)","//This component contains code for optional pagination, which has been commented out\n//This component renders the trail list and the map for search results, favorite, and completed pages\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport { Grid, Sticky } from 'semantic-ui-react'\n// import { Grid, Sticky, Pagination } from 'semantic-ui-react'\nimport { extendedInfo, refreshMap } from '../actions'\n\nimport TrailList from './TrailList'\nimport Map from './Map'\nimport SubHeader from './SubHeader'\n\n\n\nclass TrailWithMap extends React.Component {\n    \n    contextRef = React.createRef() //for Sticky component\n\n    // state = {\n    //     activePage: 1\n    // }\n    \n    // //number trails displayed per page:\n    // trailsPerPage = 5\n\n    //trail prop is the trails array sliced for pagination\n    // trailProp = this.props.trails.slice((this.state.activePage-1)*this.trailsPerPage,this.state.activePage*this.trailsPerPage)\n\n    componentDidMount(){\n        if(this.props.showExtendedInfo===true) this.props.extendedInfo(false)\n    }\n\n    renderExtendedInfoButton(){\n        if(this.props.showExtendedInfo){\n            return(\n                <div className='ui button enlarge-on-hover' style={{color:'white', backgroundColor:'#1A8D1A'}} onClick={()=>{this.props.refreshMap(true);this.props.extendedInfo(false)}}><i className='ui icon map'></i>Show Map</div>\n            )\n        }else{\n            return(\n                <div className='ui button enlarge-on-hover' style={{color:'white', backgroundColor:'#1A8D1A', marginBottom:'1rem'}} onClick={()=>this.props.extendedInfo(true)}><i className='ui icon plus'></i>More Info</div>\n            )\n        }\n\n    }\n\n    render(){\n        // let trailProp = this.props.trails.slice((this.state.activePage-1)*this.trailsPerPage,this.state.activePage*this.trailsPerPage)\n\n\n        return(\n            <div>\n                <SubHeader headerContent={this.props.headerContent} addDropdown={this.props.addDropdown}/>\n                <div ref={this.contextRef}>\n                    <Grid>\n                        <Grid.Column width={this.props.showExtendedInfo ? 12 : 5}>\n                            <TrailList trails={this.props.trails}/>\n                            {/* <TrailList trails={trailProp} pageNumber={this.state.activePage} trailsPerPage={this.trailsPerPage}/> */}\n                        </Grid.Column>\n                        <Grid.Column width={this.props.showExtendedInfo ? 4 : 11}>\n                                <Sticky context={this.contextRef} offset={50}>\n                                    {this.renderExtendedInfoButton()}\n                                    {/* <Map trails={trailProp} pageNumber={this.state.activePage} trailsPerPage={this.trailsPerPage}/> */}\n                                    <Map trails={this.props.trails}/>\n                                </Sticky> \n\n                        </Grid.Column> \n                    </Grid>\n                </div>\n                {/* <div className='ui centered grid' style={{marginTop:'1rem'}}>\n                    <Pagination\n                        activePage={this.state.activePage}\n                        onPageChange={(e, {activePage})=>{this.setState({activePage})}}\n                        totalPages={Math.ceil(this.props.trails.length/this.trailsPerPage)}\n                    /> \n                </div> */}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        showExtendedInfo: state.extendedInfo\n    })\n}\n\nexport default connect(mapStateToProps,{extendedInfo, refreshMap})(TrailWithMap)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { searchTrails } from '../../actions'\nimport { Link } from 'react-router-dom'\n\nimport TrailWithMap from '../TrailWithMap'\n\nclass SearchResults extends React.Component {\n    searchTerm = localStorage.getItem('searchTerm')\n\n    componentDidMount(){\n        document.title = `Trail Finder | Search Results For ${this.searchTerm}`\n        this.props.searchTrails()\n    }\n\n    render(){\n        if(!this.props.trails){\n            //this if statement prevents \"no trail results for ...\" for a second when making a second search if the previous one returned no results\n            if(localStorage.getItem('geocodingResults')==='false' || localStorage.getItem('trailResults')==='false'){\n                return(\n                    <div style={{textAlign:'center'}}>\n                        <h1 style={{marginTop:'4rem', textTransform:'capitalize'}}>No trails found near {this.searchTerm}</h1>\n                        <Link to='/' style={{fontSize:'1.2rem'}}>Search again?</Link>\n                    </div>\n                )  \n            }else{\n                return(\n                    <h3>Loading...</h3>\n                )\n            }\n \n        }\n        return(\n            <div>\n                <TrailWithMap trails={this.props.trails} headerContent={`Trails Near ${this.searchTerm}`} addDropdown={true}/>             \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return({\n        trails: state.trailSearchResults\n    })\n}\n\nexport default connect(mapStateToProps,{searchTrails})(SearchResults)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { Rating } from 'semantic-ui-react'\n\nimport { fetchTrail } from '../../actions'\n\nimport DifficultyLabel from '../DifficultyLabel'\nimport TodoCompleteButtons from '../TodoCompleteButtons'\nimport Map from '../Map'\n\nconst stockImage = 'https://i.imgur.com/TbzMxRA.jpg'\n// import stockImage from '../../assets/naturePhoto2.jpg'\n\nclass TrailDetail extends React.Component {\n    componentDidMount(){\n        this.props.fetchTrail(this.props.match.params.id)\n    }\n\n    componentDidUpdate(){\n        if(!this.props.trail) return\n        if(document.title !== `Trail Finder | ${this.props.trail.name}`) document.title = `Trail Finder | ${this.props.trail.name}`\n    }\n\n    iconStyles = {\n        width:'1.3rem'\n    }\n\n    // for labels that go with icon\n    labelStyles = {\n        fontWeight:'bold',\n        fontSize:'1.15rem',\n        paddingLeft:'.3rem',\n        verticalAlign:'top'\n    }\n\n    // for first info under icon label\n    detailStyles= {\n        marginLeft:'1.6rem' //1.3 + .3\n    }\n\n    // for all other info items after first one\n    detailStyles2= {\n        marginLeft:'1.6rem',\n        marginTop:'-1rem'\n    }\n\n    //calculates average and max grade of trail\n    calcGrade(){\n        let avg = Math.round(this.props.trail.ascent/(this.props.trail.length*5280)*100) //calcs grade and rounds\n        let max = Math.round(avg*2.8) //assume max grade is 2.8 times the average\n        return({avg,max})\n    }\n\n    getDifficulty(){\n        switch(this.props.trail.difficulty) {\n            case ('green'):\n                return('Easy')\n            case ('greenBlue'):\n                return('Easy')\n            case ('blue'):\n                return('Intermediate')\n            case ('blueBlack'):\n                return('Intermediate')\n            case ('black'):\n                return('Difficult')\n            default:\n                return('Loading')\n        }\n    }\n\n    //if there is no image available, a stock image and text is used\n    renderImage = (trail) => {\n        if(trail.imgMedium){\n            return(\n                <img src={trail.imgMedium} style={{width:'100%', height:'40vh', objectFit:'cover', borderRadius:'5px'}} alt={trail.name}/>\n            )\n        }else{\n            return(\n                <>\n                    <img src={stockImage} style={{width:'100%', height:'40vh', objectFit:'cover', borderRadius:'5px'}} alt={trail.name}/>\n                    <div style={{position:'absolute',bottom:'15px',left:'30px', color:'white', fontSize:'1.2rem', fontWeight:'bold'}}>No Photo Available (Stock Photo)</div>\n                </>\n            )\n        }\n    }\n\n    render(){\n        const trail = this.props.trail\n\n        if(!trail || trail.id.toString()!==this.props.match.params.id) return <div>Loading...</div> //prevents error and prevents previously loaded trail from showing while data is being fetched\n        return(\n            <>\n            <div className='ui divider' style={{marginTop:'-1rem'}}></div>\n            <div className='ui grid' style={{marginTop:'1.5rem', minHeight:'88vh'}}>\n                <div className='ten wide column'>\n                    <div className='ui grid'>\n                        <div className='row'>\n                            <div className='sixteen wide column' style={{verticalAlign:'middle'}}>\n                                <span style={{fontWeight:'bold', fontSize:'2rem'}}>{trail.name}</span> <span> - {trail.location}</span>\n                                {/* <h1>{trail.name}</h1> */}\n                                <div style={{fontWeight:'bold', fontSize:'1.1rem', marginTop:'.8rem'}}>\n                                    \"{trail.summary==='Needs Summary' ? 'A fun hike.' : trail.summary}\"\n                                </div>\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div id='difficulty' className='five wide column' style={{alignSelf:'center'}}>\n                                <DifficultyLabel difficulty={trail.difficulty} />\n                            </div>\n                            <div className='five wide column middle aligned'>\n                                <Rating icon='star' rating={Math.round(trail.stars)} maxRating={5}/> - {trail.stars} ({trail.starVotes} ratings)\n                            </div>\n                            <div className='six wide column middle aligned'>\n                                <TodoCompleteButtons trail={trail} user={this.props.user} redirectTo={'/trails/'+this.props.match.params.id} buttonSize='small'/>\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className='sixteen wide column'>\n                                {this.renderImage(trail)}\n                            </div>\n                        </div>\n                        <div className='row'>\n                            <div className='four wide column'>\n                                <i className='ui icon map outline' style={{marginRight:'0rem'}}></i><span style={this.labelStyles}>Trail</span>\n                                {/* <img src=\"https://cdn.apstatic.com/img/trailStats/hike.svg\" style={this.iconStyles} alt='Trail Icon'></img><span style={this.labelStyles}>Trail</span> */}\n                                <p style={this.detailStyles}><span style={{fontWeight:'bold'}}>{trail.length.toString().length===1 ? `${trail.length}.0` : trail.length}</span> miles</p>\n                                <p style={this.detailStyles2}>{this.getDifficulty()}</p>\n                            </div>\n                            <div className='four wide column'>\n                                <i className='ui icon arrows alternate vertical' style={{marginRight:'0rem'}}></i><span style={this.labelStyles}>Elevation</span>\n                                {/* <img src=\"https://cdn.apstatic.com/img/trailStats/elevationGain.svg\" style={this.iconStyles} alt='Elevation Icon'></img><span style={this.labelStyles}>Elevation</span> */}\n                                <p style={this.detailStyles}>Ascent: <span style={{fontWeight:'bold'}}>{trail.ascent}'</span></p>\n                                <p style={this.detailStyles2}>Descent: <span style={{fontWeight:'bold'}}>{trail.descent}'</span></p>\n                                <p style={this.detailStyles2}>High: <span style={{fontWeight:'bold'}}>{trail.high}'</span></p>\n                                <p style={this.detailStyles2}>Low: <span style={{fontWeight:'bold'}}>{trail.low}'</span></p>\n                            </div>\n                            <div className='four wide column'>\n                                <i className='ui icon chart line' style={{marginRight:'0rem'}}></i><span style={this.labelStyles}>Grade</span>\n                                {/* <img src=\"https://cdn.apstatic.com/img/trailStats/upDownArrows.svg\" style={this.iconStyles} alt='Up/Down Icon'></img><span style={this.labelStyles}>Grade</span> */}\n                                <p style={this.detailStyles}>Avg Grade: <span style={{fontWeight:'bold'}}>{this.calcGrade().avg}%</span></p>\n                                <p style={this.detailStyles2}>Max Grade: <span style={{fontWeight:'bold'}}>{this.calcGrade().max}%</span></p>\n                            </div>\n                            <div className='four wide column'>\n                                <i className='ui icon bolt' style={{marginRight:'0rem'}}></i><span style={this.labelStyles}>Condition</span>\n                                <p style={this.detailStyles}>{trail.conditionStatus}</p>\n                            </div>\n                        </div>\n                    </div>\n            </div>\n            <div className='six wide column'>\n                <div className='row'>\n                    <a className='ui button enlarge-on-hover' style={{color:'white', backgroundColor:'#1A8D1A', marginBottom:'1rem'}} target=\"_blank\" href={`https://www.google.com/maps/dir/?api=1&destination=${trail.latitude},${trail.longitude}`}><i className='ui icon location arrow'></i>Get Directions</a>\n                </div>\n                <div className='row'>\n                    <Map trails={[this.props.trail]}/>\n                </div>\n            </div>\n                <Link className='enlarge-on-hover' to='/trails'style={{paddingBottom:'3rem'}}><i className='ui icon left arrow'></i>Back to search results</Link>\n            </div>\n            </>\n\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return({\n        trail: state.currentTrail ? state.currentTrail.trails[0] : null, //prevents when there is no currentTrail.trails\n        user: state.currentUser\n    })\n}\n\nexport default connect(mapStateToProps, {fetchTrail})(TrailDetail)","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport TrailWithMap from '../TrailWithMap'\n\nclass WishList extends React.Component {\n    componentDidMount(){\n        document.title = \"Trail Finder | Favorites\"\n    }\n\n    headerContent(){\n        if(!this.props.user) return ''\n        if(this.props.user.wishList.length===0) return 'No Trails Added To Favorite List Yet'\n        // return `${this.props.user.name ? this.props.user.name + \"'s\" : 'Your'} Favorite List`\n        return `Your Favorite Trails`\n    }\n\n    render(){\n        if(!this.props.user) return(<div>Log in to see favorite trails</div>)\n        return(\n            <div>\n                <TrailWithMap trails={this.props.user.wishList} headerContent={this.headerContent()}/>             \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return({\n        user: state.currentUser\n    })\n}\n\nexport default connect(mapStateToProps)(WishList)","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport TrailWithMap from '../TrailWithMap'\n\nclass Completed extends React.Component {\n    componentDidMount(){\n        document.title = 'Trail Finder | Completed Trails'\n    }\n\n    headerContent(){\n        if(!this.props.user) return ''\n        if(this.props.user.wishList.length===0) return 'No Completed Trails Yet'\n        // return `${this.props.user.name ? this.props.user.name + \"'s\" : 'Your'} Completed Trails`\n        return `Your Completed Trails`\n    }\n\n    render(){\n        if(!this.props.user) return(<div>Log in to see completed trails</div>)\n        return(\n            <div>\n                <TrailWithMap trails={this.props.user.completed} headerContent={this.headerContent()}/>             \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return({\n        user: state.currentUser\n    })\n}\n\nexport default connect(mapStateToProps)(Completed)","import React from 'react'\nimport { connect } from 'react-redux'\n\nimport { openModal } from '../../actions'\n\nclass IncorrectLogin extends React.Component{\n    render(){\n        return(\n            <div>\n                Incorrect username or password. Please click <button className='button-link' onClick={()=>this.props.openModal('login',true)}>here</button> to try again.\n            </div>\n        )\n    }\n}\n\nexport default connect(null,{openModal})(IncorrectLogin)","import React from 'react'\nimport { connect } from 'react-redux'\n\nconst defaultPhoto = 'https://i.imgur.com/V5uVYsb.png'\n// const defaultPhoto = require('../../assets/missing-avatar.png')\n\nclass Settings extends React.Component{\n    state = {\n        units: 'imperial'\n    }\n\n    componentDidMount(){\n        document.title = 'Trail Finder | Settings'\n    }\n\n    render(){\n        if(!this.props.currentUser) return <div>Loading...</div>\n\n        return(\n            <div>\n                <div className='ui divider' style={{marginTop:'-1rem'}}></div>\n                <h2 style={{textAlign:'center', margin:'3rem'}}>User Settings</h2>\n                <div className='ui grid'>\n                    <div className='five wide column' style={{display:'flex', flexDirection:'column', alignItems: 'center'}}>\n                        <img alt='Profile' id='profilePictureSettings' style={{width:'200px', height:'200px', objectFit:'cover', borderRadius:'50%'}} src={this.props.currentUser.photo} onError={()=>{document.getElementById('profilePictureSettings').src=defaultPhoto;document.getElementById('profilePictureSettings').onerror=null}}/>\n                        {/* <img style={{width:'200px', borderRadius:'50%'}} src={this.props.currentUser.photo==='none' ? defaultPhoto : this.props.currentUser.photo}/> */}\n                        <h2>{this.props.currentUser.firstName} {this.props.currentUser.lastName}</h2>\n                    </div>\n                    <div className='eleven wide column'>\n                        <form method='post' action='/api/updateUser' className=\"ui form\" style={{width:'70%'}} autoComplete='off'>\n                            <div className=\"two fields\">\n                                <div className=\"field\">\n                                    <label>First Name</label>\n                                    <input type=\"text\" name=\"firstName\" defaultValue={this.props.currentUser.firstName} placeholder='First Name'/>\n                                </div>\n                                <div className=\"field\">\n                                    <label>Last Name</label>\n                                    <input type=\"text\" name=\"lastName\" defaultValue={this.props.currentUser.lastName} placeholder='Last Name'/>\n                                </div>\n                            </div>\n                            <div className=\"field\">\n                                <label>Location</label>\n                                <input type=\"text\" name=\"location\" defaultValue={this.props.currentUser.location} placeholder='Location'/>\n                            </div>\n                            <div className=\"field\">\n                                <label>Profile Photo URL</label>\n                                <input type=\"text\" name=\"photo\" defaultValue={this.props.currentUser.photo} placeholder='Profile Photo URL'/>\n                            </div>\n                            <button className='ui button enlarge-on-hover' style={{color:'white', backgroundColor:'#1A8D1A', marginTop:'2rem'}} type=\"submit\">Submit</button>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        currentUser: state.currentUser\n    })\n}\n\nexport default connect(mapStateToProps)(Settings)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nconst defaultPhoto = 'https://i.imgur.com/V5uVYsb.png'\n// const defaultPhoto = require('../../assets/missing-avatar.png')\n\nclass Profile extends React.Component{\n    componentDidMount(){\n        document.title = 'Trail Finder | Profile'\n    }\n\n    renderTrails(type){\n        return(\n            <ul>\n                {this.props.currentUser[type].map(el=><Link to={`/trails/${el.id}`} style={{color:'black'}}><li>{el.name}</li></Link>)}\n            </ul>\n        )\n    }\n\n    formatDate(date){\n        const dateString = new Date(this.props.currentUser.dateCreated).toDateString()\n        return(\n            `${dateString.slice(3,10)}, ${dateString.slice(11,16)}`\n        )\n    }\n\n    render(){\n        if(!this.props.currentUser) return <div>Loading...</div>\n\n        return(\n            <div>\n                <div className='ui divider' style={{marginTop:'-1rem'}}></div>\n                <h2 style={{textAlign:'center', margin:'3rem'}}>User Profile</h2>\n                <div className='ui grid'>\n                    <div className='five wide column' style={{display:'flex', flexDirection:'column', alignItems: 'center'}}>\n                        <img alt='Profile' id='profilePictureProfile' style={{width:'200px', height:'200px', objectFit:'cover', borderRadius:'50%'}}  src={this.props.currentUser.photo} onError={()=>{document.getElementById('profilePictureProfile').src=defaultPhoto;document.getElementById('profilePictureProfile').onerror=null}}/>\n                        <h2>{this.props.currentUser.firstName} {this.props.currentUser.lastName}</h2>\n                        <h4 style={{marginBottom:'0px'}}>Location:</h4>\n                        <p>{this.props.currentUser.location}</p>\n                        <h4 style={{marginBottom:'0px'}}>Member Since:</h4>\n                        <p>{this.formatDate(this.props.currentUser.dateCreated)}</p>\n                        <Link to='/settings' className='ui button enlarge-on-hover' style={{color:'white', backgroundColor:'#1A8D1A', marginTop:'2rem'}}>Edit Profile</Link>\n                    </div>\n                    <div className='eleven wide column'>\n                        <Link to='/favorites' style={{color:'black'}}><h3><i className='ui icon heart' style={{color:'red'}}></i>Favorite Trails ({this.props.currentUser.wishList.length})</h3></Link>\n                        {this.renderTrails('wishList')}\n                        <Link to='/completed' style={{color:'black'}}><h3><i className='ui icon circle check' style={{color:'green'}}></i>Completed Trails ({this.props.currentUser.completed.length})</h3></Link>\n                        {this.renderTrails('completed')}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        currentUser: state.currentUser\n    })\n}\n\nexport default connect(mapStateToProps)(Profile)","import React from 'react'\n\nclass About extends React.Component{\n    componentDidMount(){\n        document.title = 'Trail Finder | About'\n    }\n\n    render(){\n        return(\n            <div>\n                <div className='ui divider' style={{marginTop:'-1rem'}}></div>\n                <div>\n                    <p>Trail Finder was built on a MERN stack (MongoDB, Express.js, React, Node.js) by <a href='https://github.com/RobertAMcCullough'>Bob McCullough</a>.</p>\n                    <p>Other technologies used include Redux, Google's Geocoding and Maps Javascript APIs, Semantic UI, and Passport.js (Google, Twitter, and Local authentication strategies).</p>\n                    <p>This website was inspired by <a href='https://www.hikingproject.com'>Hiking Project</a> and makes use of their public <a href='https://www.hikingproject.com/data'>API</a>.</p>\n                    <p>Contact Bob via <a href='mailto: robertamccullough@gmail.com'>email</a>.</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default About","import React from 'react'\nimport { connect } from 'react-redux'\nimport { BrowserRouter, Route} from 'react-router-dom'\n\nimport { fetchUser, screenResize } from '../actions'\n\nimport Header from './Header'\nimport Home from './pages/Home'\nimport SearchResults from './pages/SearchResults'\nimport TrailDetail from './pages/TrailDetail'\nimport WishList from './pages/WishList'\nimport Completed from './pages/Completed'\nimport IncorrectLogin from './pages/IncorrectLogin'\nimport Settings from './pages/Settings'\nimport Profile from './pages/Profile'\nimport About from './pages/About'\n\n\nclass App extends React.Component {\n    componentDidMount(){\n        //updates state when window is resized\n        window.addEventListener('resize', ()=>{\n            this.props.screenResize(window.innerWidth)\n        })\n\n        this.props.fetchUser()\n        this.props.screenResize(window.innerWidth)\n    }\n\n    render(){\n        return(\n            <div className=' main-container'>            \n                <div className='ui container' style={{position:'relative'}}>\n                    <BrowserRouter>\n                        <Route path='/' component={Header}></Route>\n                        <Route path='/' exact component={Home}></Route>\n                        <Route path='/trails' exact component={SearchResults}></Route>\n                        <Route path='/trails/:id' exact component={TrailDetail}></Route>\n                        <Route path='/favorites' exact component={WishList}></Route>\n                        <Route path='/completed' exact component={Completed}></Route>\n                        <Route path='/incorrectLogin' exact component={IncorrectLogin}></Route>\n                        <Route path='/settings' exact component={Settings}></Route>\n                        <Route path='/profile' exact component={Profile}></Route>\n                        <Route path='/about' exact component={About}></Route>\n                    </BrowserRouter>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return({\n        user: state.currentUser\n    })\n}\n\nexport default connect(mapStateToProps, {fetchUser, screenResize})(App)","import { combineReducers } from 'redux'\n\nimport fetchUser from './fetchUser'\nimport searchTrails from './searchTrails'\nimport sortBy from './sortBy'\nimport fetchTrail from './fetchTrail'\nimport openModal from './openModal'\nimport refreshMap from './refreshMap'\nimport infoWindow from './infoWindow'\nimport extendedInfo from './extendedInfo'\nimport screenResize from './screenResize'\n\nexport default combineReducers({\n    currentUser: fetchUser,\n    trailSearchResults: searchTrails,\n    sortBy: sortBy,\n    currentTrail: fetchTrail,\n    openModal: openModal,\n    refreshMap: refreshMap,\n    infoWindow: infoWindow,\n    extendedInfo: extendedInfo,\n    screenSize: screenResize\n})","import { FETCH_USER, TOGGLE_WISHLIST, TOGGLE_COMPLETE } from '../actions/types'\n\n//null means waiting for initial response\nexport default (state = null, action) => {\n    switch(action.type) {\n        case (FETCH_USER):\n            if(!action.payload.data) return false\n            return action.payload.data\n        case (TOGGLE_WISHLIST):\n            return action.payload.data\n        case (TOGGLE_COMPLETE):\n            return action.payload.data\n        default:\n            return state\n    }\n}","import { SEARCH_TRAILS } from '../actions/types'\n\n//null means waiting for initial response\nexport default (state = [], action) => {\n    switch(action.type) {\n        case (SEARCH_TRAILS):\n            //the first three happen when there are zero search results\n            if(action.payload===null) return null \n            // if(!action.payload.data) return []\n            if(!action.payload.data) return null\n            if(action.payload.data.trails.length===0) return null\n            return action.payload.data.trails\n        default:\n            return state\n    }\n}","import { SORT_TRAILS } from '../actions/types'\n\n//null means waiting for initial response\nexport default (state = '', action) => {\n    switch(action.type) {\n        case (SORT_TRAILS):\n            return action.payload\n        default:\n            return state\n    }\n}","import { FETCH_TRAIL } from '../actions/types'\n\n//null means waiting for initial response\nexport default (state = null, action) => {\n    switch(action.type) {\n        case (FETCH_TRAIL):\n            return action.payload.data\n        default:\n            return state\n    }\n}","import { OPEN_MODAL } from '../actions/types'\n\n//sets state to true or false for open state of signup and login modals\n//payload is in form of array, with 0 index being 'login or 'signup' and 1 index being boolean stating whether it should be open\nexport default (state = {login: false, signup: false}, action) => {\n    switch(action.type) {\n        case (OPEN_MODAL):\n            if(action.payload[0]==='login'){\n                //if modal is false, then both modals are close, if it is true, the second modal is closed since only one should be open at a time\n                return action.payload[1]===false ? {login: false, signup: false} : {login: true, signup: false}\n            }else{\n                return action.payload[1]===false ? {login: false, signup: false} : {login: false, signup: true}\n            }\n        default:\n            return state\n    }\n}","import { REFRESH_MAP } from '../actions/types'\n\n//null means waiting for initial response\nexport default (state = false, action) => {\n    switch(action.type) {\n        case (REFRESH_MAP):\n            return action.payload\n        default:\n            return state\n    }\n}","import { INFO_WINDOW } from '../actions/types'\n\nexport default (state = null, action) => {\n    switch(action.type) {\n        case (INFO_WINDOW):\n            return action.payload\n        default:\n            return state\n    }\n}","import { EXTENDED_INFO } from '../actions/types'\n\nexport default (state = false, action) => {\n    switch(action.type) {\n        case (EXTENDED_INFO):\n            return action.payload\n        default:\n            return state\n    }\n}","import { SCREEN_RESIZE } from '../actions/types'\r\n\r\n//false means waiting for initial response\r\nexport default (state = false, action) => {\r\n    switch(action.type) {\r\n        case (SCREEN_RESIZE):\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport reduxPromise from 'redux-promise'\n\nimport App from './components/App'\nimport reducers from './reducers'\n\n//The following is for Redux DevTools:\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducers, composeEnhancers(\n    applyMiddleware(reduxPromise)\n))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.querySelector('#root')\n)"],"sourceRoot":""}